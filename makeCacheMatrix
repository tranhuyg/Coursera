## This function creates a matrix then
## 1 set the value of the matrix
## 2 get the value of the matrix
## 3 set the value of the inverse
## 4 get the value of the inverse

makeCacheMatrix <- function(x = matrix()) {
    i <- NULL
    set <- function(y) {
        x <<- y
        i <<- NULL
    }
    get <- function () x
        setinverse <- function(inverse) i <<- inverse
        getinverse <- function() i
        list( set = set, get = get, setinverse = setinverse, getinverse = getinverse)
   
}


## This function calculates the inverse of the special "matrix" created above then: 
## 1 Checks to see if the inverse has already been calculated. 
## 2 If TRUE, it gets the inverse from the cache and skips the computation. 
## 3 If FALSE, it calculates the inverse of the matrix and sets the value of the inverse in the cache via the setinverse function.


cacheSolve <- function(x, ...) {
  i <- x$getinverse()
  if(!is.null(i)) {
    message("getting cached data")
    return(i)
  }
  data <- x$get()
  i <- inverse(data, ...)
  x$setinverse(m)
  i
}
